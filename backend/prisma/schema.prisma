generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int          @id @default(autoincrement())
  email               String       @unique
  password            String
  name                String?
  role                UserRole     @default(RECEIVER)
  isActive            Boolean      @default(true)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  assignedInspections Inspection[] @relation("InspectionsAssignedTo")
  createdInspections  Inspection[] @relation("InspectionsCreatedBy")
  locationId          Int?
  location            Location?    @relation(fields: [locationId], references: [id], onDelete: SetNull)
  vehicleActs         VehicleAct[]
  
  // Добавляем обратное отношение для выданных актов
  issuedVehicleActs   VehicleAct[] @relation("IssuedBy")
  
  @@map("users")
}

model Direction {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  createdAt   DateTime     @default(now())
  isActive    Boolean      @default(true)
  vehicleActs VehicleAct[]

  @@map("directions")
}

model TransportMethod {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  createdAt   DateTime     @default(now())
  isActive    Boolean      @default(true)
  vehicleActs VehicleAct[]

  @@map("transport_methods")
}

model Driver {
  id        Int      @id @default(autoincrement())
  fullName  String   // ФИО водителя
  phone     String   // Телефон в формате +7XXXXXXXXXX
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("drivers")
}

model CompanyVehicle {
  id           Int      @id @default(autoincrement())
  brand        String   // Марка ТС
  model        String   // Модель ТС
  licensePlate String   // Гос. номер
  park         String   // Парк: Собственный или Привлеченный
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("company_vehicles")
}

model Container {
  id           Int      @id @default(autoincrement())
  number       String   // Номер контейнера (4 буквы + 7 цифр)
  type         String   // Тип контейнера
  ownership    String   // Принадлежность: Собственные, Аренда, Лизинг
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("containers")
}

model CarBrand {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  createdAt   DateTime     @default(now())
  models      CarModel[]
  vehicleActs VehicleAct[]

  @@map("car_brands")
}

model CarModel {
  id          Int          @id @default(autoincrement())
  name        String
  bodyType    String?      // ДОБАВЛЕНО: тип кузова
  createdAt   DateTime     @default(now())
  brandId     Int
  brand       CarBrand     @relation(fields: [brandId], references: [id], onDelete: Cascade)
  vehicleActs VehicleAct[]
  vehicles    Vehicle[]

  @@unique([brandId, name])
  @@map("car_models")
}

model Vehicle {
  id           Int          @id @default(autoincrement())
  vin          String
  licensePlate String?
  year         Int?
  color        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  modelId      Int
  inspections  Inspection[]
  model        CarModel     @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@map("vehicles")
}

model Inspection {
  id           Int                @id @default(autoincrement())
  status       InspectionStatus   @default(PENDING)
  notes        String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  vehicleId    Int
  createdById  Int
  assignedToId Int?
  damages      InspectionDamage[]
  assignedTo   User?              @relation("InspectionsAssignedTo", fields: [assignedToId], references: [id])
  createdBy    User               @relation("InspectionsCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  vehicle      Vehicle            @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("inspections")
}

model DamageType {
  id          Int                @id @default(autoincrement())
  name        String             @unique
  description String?
  severity    SeverityLevel      @default(MINOR)
  createdAt   DateTime           @default(now())
  damages     InspectionDamage[]

  @@map("damage_types")
}

model InspectionDamage {
  id           Int        @id @default(autoincrement())
  description  String?
  photoUrl     String?
  coordinates  String?
  createdAt    DateTime   @default(now())
  inspectionId Int
  damageTypeId Int
  damageType   DamageType @relation(fields: [damageTypeId], references: [id], onDelete: Cascade)
  inspection   Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)

  @@map("inspection_damages")
}
model Location {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  address   String
  city      String?   // Измените на String? (необязательное)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  vehicleActs VehicleAct[]
  users       User[]

  @@map("locations")
}

enum InspectionTime {
  DAY
  NIGHT
  RAIN
  SNOW
}

enum ExternalCondition {
  CLEAN
  DIRTY
  WET
  DUSTY
  SNOWY
  ICY
}

enum FuelLevel {
  EMPTY
  QUARTER
  HALF
  THREE_QUARTERS
  FULL
}

model VehicleAct {
  id                      String          @id @default(cuid())
  contractNumber          String          @unique
  date                    DateTime
  principal               String?
  principalPhone      String?   // Телефон принципала
  senderPhone         String?   // Телефон отправителя
  principalPassport   String?   // Паспорт принципала
  transportCost       Float?    // Стоимость перевозки
  bodyType            String?   // Тип кузова
  sender                  String?
  directionId      Int?
  direction        Direction?      @relation(fields: [directionId], references: [id], onDelete: SetNull)
  transportMethodId Int?
  transportMethod  TransportMethod? @relation(fields: [transportMethodId], references: [id], onDelete: SetNull)
  vin                     String
  licensePlate            String
  carBrandId              Int? // Меняем String? на Int? для соответствия с CarBrand.id
  carBrand                CarBrand?       @relation(fields: [carBrandId], references: [id], onDelete: SetNull)
  carModelId              Int? // Меняем String? на Int? для соответствия с CarModel.id
  carModel                CarModel?       @relation(fields: [carModelId], references: [id], onDelete: SetNull)
  color                   String
  year                    Int
  fuelLevel               FuelLevel
  internalContents        String?
  inspectionTime          InspectionTime
  externalCondition       ExternalCondition
  interiorCondition       InteriorCondition  @default(CLEAN) // вместо String
  paintInspectionImpossible Boolean        @default(false)
  equipment               Json
  status                  VehicleActStatus @default(NEW) // Оставляем только это определение
  photos                  Photo[]
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  userId                  Int?
  user                    User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  LocationId Int?
  Location   Location? @relation(fields: [LocationId], references: [id], onDelete: SetNull)
  receivedAt         DateTime?
  @@map("vehicle_acts")
  issueType          IssueType?     // Тип выдачи: получатель или транспорт
  issueData          Json?          // Данные выдачи в формате JSON
  issuedAt           DateTime?      // Дата и время выдачи
  issuedById         Int?           // Кто выдал
  issuedBy           User?          @relation("IssuedBy", fields: [issuedById], references: [id], onDelete: SetNull)
}

model Photo {
  id            String     @id @default(cuid())
  filename      String
  vehicleActId  String
  vehicleAct    VehicleAct @relation(fields: [vehicleActId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())

  @@map("photos")
}

enum IssueType {
  RECIPIENT    // Выдача грузополучателю
  TRANSPORT    // Выдача на транспорт
  CONTAINER    
}

enum UserRole {
  ADMIN
  MANAGER
  RECEIVER
}
enum VehicleActStatus {
  NEW
  RECEIVED
  COMPLETED
  CANCELLED
  LOADED_INTO_CONTAINER
}

enum InspectionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SeverityLevel {
  MINOR
  MODERATE
  SEVERE
  CRITICAL
}

enum InteriorCondition {
  CLEAN
  DIRTY
  DAMAGED
}
