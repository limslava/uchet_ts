import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import QrScanner from '../../components/vehicle/QrScanner/QrScanner';
import { getVehicleActById, issueVehicle } from '../../services/api';
import './IssueByScan.css';

const IssueByScan = () => {
  const [step, setStep] = useState('type-selection');
  const [issueType, setIssueType] = useState(null);
  const [transportType, setTransportType] = useState(null);
  const [scanResult, setScanResult] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleIssueTypeSelect = (type) => {
  setIssueType(type);
  
  if (type === 'RECIPIENT') {
    setStep('scanning');
  } else if (type === 'TRANSPORT') {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –æ—Ç–≥—Ä—É–∑–∫–∏
    navigate('/transport-type'); // –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ transport-type
  }
};

  const handleTransportSelect = (type) => {
    setTransportType(type);
    setStep('scan-for-transport');
  };

  const handleScanSuccess = async (decodedText) => {
    setLoading(true);
    setError('');
    
    try {
      let actId = decodedText;
      
      if (decodedText && decodedText.includes('/vehicle-acts/')) {
        const urlParts = decodedText.split('/vehicle-acts/');
        actId = urlParts[urlParts.length - 1];
      }
      
      const vehicleAct = await getVehicleActById(actId);
      
      if (vehicleAct.status !== 'RECEIVED') {
        setError('–¢–° –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–Ω—è—Ç–æ –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π');
        return;
      }
      
      setScanResult(vehicleAct);
      
      // –†–ê–ó–î–ï–õ–Ø–ï–ú –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤—ã–¥–∞—á–∏
      if (issueType === 'RECIPIENT') {
        setStep('confirmation');
      } else if (issueType === 'TRANSPORT') {
        // –î–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞
        setStep('transport-selection');
      }
    } catch (err) {
      setError('–ê–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
      console.error('Scan error:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleScanForTransportSuccess = async (decodedText) => {
    setLoading(true);
    setError('');
    
    try {
      let actId = decodedText;
      
      if (decodedText && decodedText.includes('/vehicle-acts/')) {
        const urlParts = decodedText.split('/vehicle-acts/');
        actId = urlParts[urlParts.length - 1];
      }
      
      const vehicleAct = await getVehicleActById(actId);
      
      if (vehicleAct.status !== 'RECEIVED') {
        setError('–¢–° –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–Ω—è—Ç–æ –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π');
        return;
      }
      
      setScanResult(vehicleAct);
      
      // –ü–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
      if (transportType === 'container') {
        navigate(`/container-stuffing/${vehicleAct.id}`);
      } else {
        setStep('confirmation');
      }
    } catch (err) {
      setError('–ê–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
      console.error('Scan error:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleScanError = (error) => {
    console.error('Scanner error:', error);
  };

  const handleIssueSubmit = async () => {
    try {
      await issueVehicle(scanResult.id, {
        issueType,
        issueData: {
          issuedAt: new Date().toISOString()
        }
      });
      alert('–í—ã–¥–∞—á–∞ –¢–° —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!');
      navigate('/');
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤—ã–¥–∞—á–∏: ' + (err.response?.data?.error || err.message));
      console.error('Issue error:', err);
    }
  };

  const handleBack = () => {
    if (step === 'scanning') {
      setStep('type-selection');
      setIssueType(null);
    } else if (step === 'confirmation') {
      setStep('scanning');
      setScanResult(null);
    } else if (step === 'transport-selection') {
      setStep('scanning');
      setScanResult(null);
    } else if (step === 'scan-for-transport') {
      setStep('transport-selection');
    }
  };

  const transportTypes = [
    { id: 'autocarrier', name: '–ê–≤—Ç–æ–≤–æ–∑', icon: 'üöõ' },
    { id: 'container', name: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä', icon: 'üì¶' },
    { id: 'net', name: '–°–µ—Ç–∫–∞', icon: 'üî≤' },
    { id: 'truck', name: '–§—É—Ä–∞', icon: 'üöö' }
  ];

  return (
    <div className="issue-by-scan">
      <h2>–í—ã–¥–∞—á–∞ –¢–° –ø–æ QR-–∫–æ–¥—É</h2>
      
      {error && <div className="error">{error}</div>}
      
      {/* –®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≤—ã–¥–∞—á–∏ */}
      {step === 'type-selection' && (
        <div className="issue-type-selection">
          <h3>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—ã–¥–∞—á–∏:</h3>
          <div className="issue-type-buttons">
            <button 
              onClick={() => handleIssueTypeSelect('RECIPIENT')}
              className="btn btn-primary"
            >
              –í—ã–¥–∞—á–∞ –≥—Ä—É–∑–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—é
            </button>
            <button 
              onClick={() => handleIssueTypeSelect('TRANSPORT')}
              className="btn btn-secondary"
            >
              –û—Ç–≥—Ä—É–∑–∫–∞
            </button>
            <button 
              onClick={() => navigate('/')}
              className="btn btn-outline"
            >
              –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
            </button>
          </div>
        </div>
      )}
      
      {/* –®–∞–≥ 2: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –≤—ã–¥–∞—á–∏ */}
      {step === 'scanning' && (
        <div className="scanning-step">
          <h3>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –¢–°</h3>
          <QrScanner 
            onScanSuccess={handleScanSuccess}
            onScanError={handleScanError}
            showCameraSelection={true}
          />
          {loading && <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>}
          <button onClick={handleBack} className="btn btn-secondary back-button">
            –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞
          </button>
        </div>
      )}
      
      {/* –®–∞–≥ 3: –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {step === 'transport-selection' && scanResult && (
        <div className="transport-type-selection">
          <h3>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–≥—Ä—É–∑–∫–∏ –¥–ª—è –¢–°:</h3>
          <div className="act-info">
            <p><strong>–î–æ–≥–æ–≤–æ—Ä:</strong> {scanResult.contractNumber}</p>
            <p><strong>–ú–∞—Ä–∫–∞:</strong> {scanResult.carBrand?.name}</p>
            <p><strong>–ú–æ–¥–µ–ª—å:</strong> {scanResult.carModel?.name}</p>
          </div>
          <div className="transport-grid">
            {transportTypes.map(type => (
              <button
                key={type.id}
                className="transport-btn"
                onClick={() => handleTransportSelect(type.id)}
              >
                <span className="transport-icon">{type.icon}</span>
                <span className="transport-name">{type.name}</span>
              </button>
            ))}
          </div>
          <div className="action-buttons">
            <button onClick={() => setStep('scanning')} className="btn btn-secondary">
              –ù–∞–∑–∞–¥ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
            </button>
            <button onClick={() => navigate('/')} className="btn btn-secondary">
              –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            </button>
          </div>
        </div>
      )}
      
      {/* –®–∞–≥ 4: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ */}
      {step === 'scan-for-transport' && (
        <div className="scanning-step">
          <h3>–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –¢–° –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏ ({transportType})</h3>
          <QrScanner 
            onScanSuccess={handleScanForTransportSuccess}
            onScanError={handleScanError}
            showCameraSelection={true}
          />
          {loading && <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>}
          <button onClick={handleBack} className="btn btn-secondary back-button">
            –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞
          </button>
        </div>
      )}
      
      {/* –®–∞–≥ 5: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞—á–∏ –≥—Ä—É–∑–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—é */}
      {step === 'confirmation' && issueType === 'RECIPIENT' && scanResult && (
        <div className="confirmation-step">
          <h3>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞—á–∏ –≥—Ä—É–∑–æ–ø–æ–ª—É—á–∞—Ç–µ–ª—é</h3>
          
          <div className="act-details">
            <h4>–î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∞:</h4>
            <p><strong>–î–æ–≥–æ–≤–æ—Ä ‚Ññ:</strong> {scanResult.contractNumber}</p>
            <p><strong>–ú–∞—Ä–∫–∞:</strong> {scanResult.carBrand?.name}</p>
            <p><strong>–ú–æ–¥–µ–ª—å:</strong> {scanResult.carModel?.name}</p>
            <p><strong>–ì–æ—Å.–Ω–æ–º–µ—Ä:</strong> {scanResult.licensePlate}</p>
            <p><strong>VIN:</strong> {scanResult.vin}</p>
          </div>
          
          <div className="recipient-info">
            <h4>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:</h4>
            <div className="info-row">
              <label>–§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è:</label>
              <span>{scanResult.principal || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
            </div>
            <div className="info-row">
              <label>–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è:</label>
              <span>{scanResult.principalPhone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
            </div>
            <div className="info-row">
              <label>–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</label>
              <span>{scanResult.principalPassport || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
            </div>
          </div>
          
          <div className="action-buttons">
            <button onClick={handleIssueSubmit} className="btn btn-primary">
              –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–¥–∞—á—É
            </button>
            <button onClick={handleBack} className="btn btn-secondary">
              –ù–∞–∑–∞–¥ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default IssueByScan;